{
  "name": "troophunter",
  "version": "1.0.0",
  "private": true,
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "scripts": {
    "dev": "turbo dev",
    "build": "turbo build",
    "lint": "turbo run lint",
    "install:workspace": "npm install",
    "install:projects": "npm install --prefix website && npm install --prefix crm && npm install --prefix backend npm install --prefix services/auth",
    "install:website": "npm install --prefix website",
    "install:crm": "npm install --prefix crm",
    "install:backend": "npm install --prefix backend",
    "install:auth": "npm install --prefix services/auth",
    "clean": "docker compose -f docker-compose.dev.yml down -v && docker compose -f docker-compose.dev.yml rm -f && rm -rf website/.next crm/dist backend/dist services/auth/dist && find . -name 'node_modules' -type d -prune -exec rm -rf '{}' + && rm -rf package-lock.json",
    "clean:prod": "docker compose -f docker-compose.prod.yml down -v && docker compose -f docker-compose.prod.yml rm -f && rm -rf website/.next crm/dist backend/dist services/auth/dist && find . -name 'node_modules' -type d -prune -exec rm -rf '{}' + && rm -rf package-lock.json",
    "remove:logs": "rimraf backend/logs/* scraper/logs/*",
    "istio:dev": "kubectl apply -f kubernetes/istio/dev/",
    "istio:stag": "kubectl apply -f kubernetes/istio/stag/",
    "istio:prod": "kubectl apply -f kubernetes/istio/prod/",
    "start:dev": "kubectl apply -f kubernetes/k8s/main/dev/",
    "start:stag": "kubectl apply -f kubernetes/k8s/main/stag/",
    "start:prod": "kubectl apply -f kubernetes/k8s/main/prod/",
    "start:ansible": "docker compose -f docker-compose.ansible.yml up",
    "start:ansible-windows": "docker compose -f docker-compose.ansible-windows.yml up",
    "start:microfrontend": "npm run dev -- --filter=troophunter --filter=troophunter-landing --filter=dev8x --filter=helloabdul",
    "start:microservices": "npm run dev -- --filter=auth --filter=businesses --filter=countries --filter=queues --filter=users --filter=main",
    "restart:dev": "docker compose -f docker-compose.dev.yml restart",
    "restart:stag": "docker compose -f docker-compose.stag.yml restart -d",
    "restart:prod": "docker compose -f docker-compose.prod.yml restart -d",
    "restart:ansible": "docker compose -f docker-compose.ansible.yml restart",
    "restart:ansible-windows": "docker compose -f docker-compose.ansible-windows.yml restart",
    "build:dev": "docker compose -f docker-compose.dev.yml --parallel 1 build",
    "build:stag": "docker compose -f docker-compose.stag.yml --parallel 1 build",
    "build:prod": "docker compose -f docker-compose.prod.yml --parallel 1 build",
    "build:ansible": "docker compose -f docker-compose.ansible.yml build",
    "build:ansible-windows": "docker compose -f docker-compose.ansible-windows.yml build",
    "build:troophunter-landing": "npm run build -- --filter=troophunter-landing",
    "build:microservices": "npm run build -- --filter=auth --filter=businesses --filter=countries --filter=queues --filter=users --filter=main",
    "stop:dev": "docker-compose -f docker-compose.dev.yml stop",
    "stop:stag": "docker-compose -f docker-compose.stag.yml stop",
    "stop:prod": "docker-compose -f docker-compose.prod.yml stop",
    "stop:ansible": "docker compose -f docker-compose.ansible.yml stop",
    "remove:dev": "docker-compose -f docker-compose.dev.yml down",
    "remove:stag": "docker-compose -f docker-compose.stag.yml down",
    "remove:prod": "docker-compose -f docker-compose.prod.yml down",
    "remove:ansible": "docker compose -f docker-compose.ansible.yml down",
    "remove:dev:all": "docker-compose -f docker-compose.dev.yml down -v --rmi all",
    "remove:stag:all": "docker-compose -f docker-compose.stag.yml down -v --rmi all",
    "remove:prod:all": "docker-compose -f docker-compose.prod.yml down -v --rmi all",
    "remove:ansible:all": "docker compose -f docker-compose.ansible.yml down -v --rmi all",
    "remove:ansible-windows:all": "docker compose -f docker-compose.ansible-windows.yml down -v --rmi all",
    "remove:containers": "docker container prune -f",
    "remove:images": "docker image prune -a -f"
  },
  "devDependencies": {
    "concurrently": "^9.1.2",
    "rimraf": "^5.0.1",
    "serve": "^14.2.4",
    "turbo": "^2.5.4"
  },
  "dependencies": {
    "force": "^0.0.3",
    "react-countup": "^6.5.3"
  },
  "engines": {
    "node": ">=18"
  },
  "packageManager": "npm@10.1.0",
  "workspaces": [
    "packages/*",
    "microservices/*",
    "microfrontend/*"
  ]
}
