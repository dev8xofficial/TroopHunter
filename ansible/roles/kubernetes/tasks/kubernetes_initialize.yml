---
- name: Check if Kubernetes control plane is already initialized
  stat:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
  register: kube_apiserver_manifest

- name: Pull required Kubernetes images on controller
  command: kubeadm config images pull --kubernetes-version=v1.33.4
  become: true
  register: kubeadm_images
  retries: 5
  delay: 15
  until: kubeadm_images is succeeded

- name: Initialize Kubernetes cluster using kubeadm
  become: true
  command: kubeadm init --control-plane-endpoint={{ ansible_host }} --apiserver-advertise-address={{ ansible_host }} --node-name k8s-ctrlr --pod-network-cidr=10.244.0.0/16
  register: kubeadm_output
  when: not kube_apiserver_manifest.stat.exists
  ignore_errors: true

- name: Create .kube directory
  become: true
  file:
    path: "{{ kube_home }}/.kube"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  when: not kube_apiserver_manifest.stat.exists

- name: Copy admin.conf to user kube config
  become: true
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ kube_home }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  when: not kube_apiserver_manifest.stat.exists

- name: Install Flannel network plugin
  become: true
  command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: flannel_apply
  when: not kube_apiserver_manifest.stat.exists

- name: Retry kubeadm token create until it works (with KUBECONFIG)
  shell: kubeadm token create --print-join-command
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: join_command_output
  retries: 5
  delay: 40
  until: join_command_output.rc == 0

- name: Ensure {{ secrets_dir }} exists on localhost
  file:
    path: "{{ secrets_dir }}"
    state: directory
    mode: '0755'
  delegate_to: localhost

- name: Save join command output locally
  copy:
    content: "{{ join_command_output.stdout }}"
    dest: "{{ secrets_dir }}/kubeadm_join_cmd.sh"
    mode: '0755'
  delegate_to: localhost

- name: Check if control plane node is already tainted
  become: true
  command: kubectl get node k8s-ctrlr -o jsonpath='{.spec.taints}' --kubeconfig /etc/kubernetes/admin.conf
  register: taints
  changed_when: false

- name: Taint control plane node to prevent workload scheduling
  become: true
  command: kubectl taint nodes k8s-ctrlr node-role.kubernetes.io/control-plane=:NoSchedule --kubeconfig /etc/kubernetes/admin.conf
  when:
    - not kube_apiserver_manifest.stat.exists
    - '"control-plane" not in taints.stdout'

