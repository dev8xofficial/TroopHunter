---
- name: Define NVM and Node versions and URLs
  set_fact:
    nvm_version: "1.1.9"
    node_version: "18.16.0"
    nvm_installer_url: "https://github.com/coreybutler/nvm-windows/releases/download/{{ nvm_version }}/nvm-setup.exe"
    nvm_installer_path: "C:\\Windows\\Temp\\nvm-setup.exe"

- name: Download NVM installer
  win_get_url:
    url: "{{ nvm_installer_url }}"
    dest: "{{ nvm_installer_path }}"
    validate_certs: yes

- name: Run NVM installer silently
  win_shell: |
    Start-Process -FilePath "{{ nvm_installer_path }}" -ArgumentList "/SILENT" -Wait
  args:
    executable: powershell.exe

- name: Remove NVM installer
  win_file:
    path: "{{ nvm_installer_path }}"
    state: absent

- name: Add NVM directory to system PATH
  win_environment:
    state: present
    name: Path
    value: "C:\\Program Files\\nvm"
    level: machine

- name: Add Node.js symlink directory to system PATH (default NVM nodejs path)
  win_environment:
    state: present
    name: Path
    value: "C:\\Program Files\\nodejs"
    level: machine

- name: Refresh environment variables for current session
  win_shell: |
    $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine")
  args:
    executable: powershell.exe

- name: Install Node.js {{ node_version }} using NVM
  win_shell: |
    nvm install {{ node_version }}
    nvm use {{ node_version }}
  args:
    executable: powershell.exe
  register: node_install_result

- name: Verify installed Node version
  win_shell: node --version
  args:
    executable: powershell.exe
  register: node_version_check
  failed_when: node_version_check.stdout.find('{{ node_version }}') == -1

- name: Debug Node version installed
  debug:
    msg: "Node.js installed successfully. Version: {{ node_version_check.stdout }}"

- name: Verify NVM installation - get version
  win_shell: nvm version
  args:
    executable: powershell.exe
  register: nvm_version_check
  ignore_errors: true

- name: Fail if NVM did not install correctly
  fail:
    msg: "NVM installation failed or NVM is not available on the PATH."
  when: nvm_version_check.failed

- name: Debug NVM version installed
  debug:
    msg: "NVM installed successfully. Version: {{ nvm_version_check.stdout }}"
