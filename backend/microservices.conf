# Define the shared memory zone
limit_req_zone $binary_remote_addr zone=api:10m rate=1r/s;

upstream auth_service {
    server localhost:50001;
}

upstream user_service {
    server localhost:50018;
}

upstream country_service {
    server localhost:50002;
}

upstream state_service {
    server localhost:50002;
}

upstream city_service {
    server localhost:50002;
}

upstream business_phones_service {
    server localhost:50003;
}

upstream business_sources_service {
    server localhost:50003;
}

upstream business_service {
    server localhost:50003;
}

upstream lead_service {
    server localhost:50003;
}

upstream queue_service {
    server localhost:50004;
}

upstream city_queues_service {
    server localhost:50004;
}

server {
    listen 443 ssl;
    # listen 80;
    # listen [::]:80;
    # server_name localhost;

    # Nginx certificate and key for TLS communication
    ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
    ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
    ssl_protocols           TLSv1.2 TLSv1.3;
    ssl_ciphers             HIGH:!aNULL:!MD5;

    # Load the CA certificate to verify client certificates (mTLS)
    ssl_client_certificate /opt/homebrew/etc/nginx/client_certs/ca-cert.pem;
    ssl_verify_client       optional;
    ssl_verify_depth        2;
    # ssl_verify_client on;  # Enable client certificate verification

    # SSL/TLS security settings (you can adjust as per your requirements)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Allowed origins for CORS
    set $allowed_origin '';

    if ($http_origin ~* ^(https://www.troophunter.com|https://localhost:5173|https://192.168.0.220:5173|https://192.168.0.221:5173|https://localhost|https://192.168.0.220|https://192.168.0.221)$) {
        set $allowed_origin $http_origin;
    }

    location /city-queues {
        proxy_pass https://city_queues_service;  # Assuming the service listens on HTTPS

        # HTTP headers for proper communication and upgrade handling
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Mutual TLS setup for communicating with the City Queues service
        proxy_ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
        proxy_ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
        # proxy_ssl_trusted_certificate /opt/homebrew/etc/nginx/conf.d/ca-cert.pem;
        # proxy_ssl_verify on;
        # proxy_ssl_verify_depth 2;

        # Log SSL errors and set timeout
        proxy_ssl_error_log /var/log/nginx/proxy_ssl_error.log;
        proxy_connect_timeout 5s;

        # Add CORS headers if the origin matches one of the allowed origins
        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

        # Handle preflight requests (OPTIONS)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }
    }

    location /queues {
        proxy_pass https://queue_service;  # Assuming the service listens on HTTPS

        # HTTP headers for proper communication and upgrade handling
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Mutual TLS setup for communicating with the City Queues service
        proxy_ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
        proxy_ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
        # proxy_ssl_trusted_certificate /opt/homebrew/etc/nginx/conf.d/ca-cert.pem;
        # proxy_ssl_verify on;
        # proxy_ssl_verify_depth 2;

        # Log SSL errors and set timeout
        proxy_ssl_error_log /var/log/nginx/proxy_ssl_error.log;
        proxy_connect_timeout 5s;

        # Add CORS headers if the origin matches one of the allowed origins
        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

        # Handle preflight requests (OPTIONS)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }
    }

    location /leads {
        proxy_pass https://lead_service;  # Assuming the service listens on HTTPS

        # HTTP headers for proper communication and upgrade handling
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Mutual TLS setup for communicating with the City Queues service
        proxy_ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
        proxy_ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
        # proxy_ssl_trusted_certificate /opt/homebrew/etc/nginx/conf.d/ca-cert.pem;
        # proxy_ssl_verify on;
        # proxy_ssl_verify_depth 2;

        # Log SSL errors and set timeout
        proxy_ssl_error_log /var/log/nginx/proxy_ssl_error.log;
        proxy_connect_timeout 5s;

        # Add CORS headers if the origin matches one of the allowed origins
        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

        # Handle preflight requests (OPTIONS)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }
    }

    location /business-phones {
        proxy_pass https://business_phones_service;  # Assuming the service listens on HTTPS

        # HTTP headers for proper communication and upgrade handling
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Mutual TLS setup for communicating with the City Queues service
        proxy_ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
        proxy_ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
        # proxy_ssl_trusted_certificate /opt/homebrew/etc/nginx/conf.d/ca-cert.pem;
        # proxy_ssl_verify on;
        # proxy_ssl_verify_depth 2;

        # Log SSL errors and set timeout
        proxy_ssl_error_log /var/log/nginx/proxy_ssl_error.log;
        proxy_connect_timeout 5s;

        # Add CORS headers if the origin matches one of the allowed origins
        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

        # Handle preflight requests (OPTIONS)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }
    }

    location /business-sources {
        proxy_pass https://business_sources_service;  # Assuming the service listens on HTTPS

        # HTTP headers for proper communication and upgrade handling
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Mutual TLS setup for communicating with the City Queues service
        proxy_ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
        proxy_ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
        # proxy_ssl_trusted_certificate /opt/homebrew/etc/nginx/conf.d/ca-cert.pem;
        # proxy_ssl_verify on;
        # proxy_ssl_verify_depth 2;

        # Log SSL errors and set timeout
        proxy_ssl_error_log /var/log/nginx/proxy_ssl_error.log;
        proxy_connect_timeout 5s;

        # Add CORS headers if the origin matches one of the allowed origins
        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

        # Handle preflight requests (OPTIONS)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }
    }

    location /businesses {
        proxy_pass https://business_service;  # Assuming the service listens on HTTPS

        # HTTP headers for proper communication and upgrade handling
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Mutual TLS setup for communicating with the City Queues service
        proxy_ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
        proxy_ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
        # proxy_ssl_trusted_certificate /opt/homebrew/etc/nginx/conf.d/ca-cert.pem;
        # proxy_ssl_verify on;
        # proxy_ssl_verify_depth 2;

        # Log SSL errors and set timeout
        proxy_ssl_error_log /var/log/nginx/proxy_ssl_error.log;
        proxy_connect_timeout 5s;

        # Add CORS headers if the origin matches one of the allowed origins
        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

        # Handle preflight requests (OPTIONS)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }
    }

    location /countries {
        proxy_pass https://country_service;  # Assuming the service listens on HTTPS

        # HTTP headers for proper communication and upgrade handling
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Mutual TLS setup for communicating with the City Queues service
        proxy_ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
        proxy_ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
        # proxy_ssl_trusted_certificate /opt/homebrew/etc/nginx/conf.d/ca-cert.pem;
        # proxy_ssl_verify on;
        # proxy_ssl_verify_depth 2;

        # Log SSL errors and set timeout
        proxy_ssl_error_log /var/log/nginx/proxy_ssl_error.log;
        proxy_connect_timeout 5s;

        # Add CORS headers if the origin matches one of the allowed origins
        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

        # Handle preflight requests (OPTIONS)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }
    }

    location /states {
        proxy_pass https://state_service;  # Assuming the service listens on HTTPS

        # HTTP headers for proper communication and upgrade handling
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Mutual TLS setup for communicating with the City Queues service
        proxy_ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
        proxy_ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
        # proxy_ssl_trusted_certificate /opt/homebrew/etc/nginx/conf.d/ca-cert.pem;
        # proxy_ssl_verify on;
        # proxy_ssl_verify_depth 2;

        # Log SSL errors and set timeout
        proxy_ssl_error_log /var/log/nginx/proxy_ssl_error.log;
        proxy_connect_timeout 5s;

        # Add CORS headers if the origin matches one of the allowed origins
        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

        # Handle preflight requests (OPTIONS)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }
    }

    location /cities {
        proxy_pass https://city_service;  # Assuming the service listens on HTTPS

        # HTTP headers for proper communication and upgrade handling
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Mutual TLS setup for communicating with the City Queues service
        proxy_ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
        proxy_ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
        # proxy_ssl_trusted_certificate /opt/homebrew/etc/nginx/conf.d/ca-cert.pem;
        # proxy_ssl_verify on;
        # proxy_ssl_verify_depth 2;

        # Log SSL errors and set timeout
        proxy_ssl_error_log /var/log/nginx/proxy_ssl_error.log;
        proxy_connect_timeout 5s;

        # Add CORS headers if the origin matches one of the allowed origins
        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

        # Handle preflight requests (OPTIONS)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }
    }

    location /users {
        proxy_pass https://user_service;  # Assuming the service listens on HTTPS

        # HTTP headers for proper communication and upgrade handling
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Mutual TLS setup for communicating with the City Queues service
        proxy_ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
        proxy_ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
        # proxy_ssl_trusted_certificate /opt/homebrew/etc/nginx/conf.d/ca-cert.pem;
        # proxy_ssl_verify on;
        # proxy_ssl_verify_depth 2;

        # Log SSL errors and set timeout
        proxy_ssl_error_log /var/log/nginx/proxy_ssl_error.log;
        proxy_connect_timeout 5s;

        # Add CORS headers if the origin matches one of the allowed origins
        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

        # Handle preflight requests (OPTIONS)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }
    }

    location /auth {
        proxy_pass https://auth_service;  # Assuming the service listens on HTTPS

        # HTTP headers for proper communication and upgrade handling
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Mutual TLS setup for communicating with the City Queues service
        proxy_ssl_certificate /opt/homebrew/etc/ssl/nginx-cert.pem;
        proxy_ssl_certificate_key /opt/homebrew/etc/ssl/nginx-key.pem;
        # proxy_ssl_trusted_certificate /opt/homebrew/etc/nginx/conf.d/ca-cert.pem;
        # proxy_ssl_verify on;
        # proxy_ssl_verify_depth 2;

        # Log SSL errors and set timeout
        proxy_ssl_error_log /var/log/nginx/proxy_ssl_error.log;
        proxy_connect_timeout 5s;

        # Add CORS headers if the origin matches one of the allowed origins
        add_header 'Access-Control-Allow-Origin' $allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

        # Handle preflight requests (OPTIONS)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }
    }

    location / {
        return 404;
    }

    # Enable HTTPS if needed (using SSL)
    #listen 443 ssl;
    #ssl_certificate /etc/nginx/ssl/cert.pem;
    #ssl_certificate_key /etc/nginx/ssl/cert.key;

    # Rate limiting
    limit_req zone=api burst=10 nodelay;
}


